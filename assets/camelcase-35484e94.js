var d=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function f(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var t={exports:{}};const p=e=>{let r=!1,o=!1,l=!1;for(let a=0;a<e.length;a++){const s=e[a];r&&/[a-zA-Z]/.test(s)&&s.toUpperCase()===s?(e=e.slice(0,a)+"-"+e.slice(a),r=!1,l=o,o=!0,a++):o&&l&&/[a-zA-Z]/.test(s)&&s.toLowerCase()===s?(e=e.slice(0,a-1)+"-"+e.slice(a-1),l=o,o=!1,r=!0):(r=s.toLowerCase()===s&&s.toUpperCase()!==s,l=o,o=s.toUpperCase()===s&&s.toLowerCase()!==s)}return e},c=(e,r)=>{if(!(typeof e=="string"||Array.isArray(e)))throw new TypeError("Expected the input to be `string | string[]`");r=Object.assign({pascalCase:!1},r);const o=a=>r.pascalCase?a.charAt(0).toUpperCase()+a.slice(1):a;return Array.isArray(e)?e=e.map(a=>a.trim()).filter(a=>a.length).join("-"):e=e.trim(),e.length===0?"":e.length===1?r.pascalCase?e.toUpperCase():e.toLowerCase():(e!==e.toLowerCase()&&(e=p(e)),e=e.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(a,s)=>s.toUpperCase()).replace(/\d+(\w|$)/g,a=>a.toUpperCase()),o(e))};t.exports=c;t.exports.default=c;var C=t.exports;const h=f(C);export{h as a,d as c,f as g};
